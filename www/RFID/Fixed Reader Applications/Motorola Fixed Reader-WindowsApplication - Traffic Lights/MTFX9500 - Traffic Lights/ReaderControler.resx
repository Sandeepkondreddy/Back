<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAGACoDAAAFgAAACgAAAAgAAAAQAAAAAEAGAAAAAAAgAwAAAAAAAAAAAAAAAAAAAAA
        AADM1s8TreAUnsofmsA8gpRub1xmblxeb2NebmFebmJfb2Neb2NdbmNfb2Nab2ZWcmxbbmNdb2RGeoMg
        iKkOibIOibIOibIOibIOibIZhqk9fYlCeoA9d4FCeoBAeoI5g5bI2NUJtfMFqOIIo9k1hpuPXS6aVA+Y
        VhmWVRaWVRaYVhqVVhqUVRqYVhqRVRqUVRqPVRudVhdmZkwhiqkKkLwJjrsJjrsJjrsJjrseiKpxa1KK
        Wyh+UiqAWSh6Vy5naFPM2tcUv/wGtfQFq+UVospqd2WyWBGwVQy0WAy0WAywVQy0WA2zVwywVgy1WQ2y
        VgyyVgy/VgdzdVkYmcIFntEEndAEndAEndAEndAclruHbUevVQyvVQynUwylUw2EYjnO3Noew/0Nvf0I
        uvsEtvErp8aSdUfEWAfEXgu9Xg69XQ69Xg69Xg69XQ69Xg69Xg7EXgvEWgpjjpADsOIErOQFq+QGq+QG
        q+QFq+QUq9d3hW29XA67WwyvVQyvVQyHZT7R3tovx/0dw/0Vwf0Jvv0GvvdKqLa+aiDYYwnPZhDNZhLN
        ZhLNZhLNZhLNZhLNZhLYYwrBbiNErL4Av/kFufcEuPgGuPgGuPgEuPgIuPVYoaTJbh/IXwq5Ww2wVQyJ
        bkjR394vx/0kxf0Ywv0RwP0Cv/0MvvR0lobNbBraZQrUaBDSaBLSaBLSaBLSaBLUaBDaZQqYiF0iu+MC
        wv0Evf0Fvf0Evf0Hvf0Dvf0Avv02ssmsez/QYQq9Xg21WAyNbkTR4eAvx/0kxf0Ywv0SwP0Hvf0Cvv0e
        u+KRi2jWZw/UaA/SaBLSaBLSaBLSaBLVZw7Kbh1foaAFxPoEvv0Hvf0Gvf0Dvf0Jvf0Hvf0Evv0XvOqG
        jW3JYg7CXgy1WAyDbk/R4uEux/0ixv0YxP0Lw/sDw/0Aw/0CyPw1uM2mgEnbZAnSaBLSaBLSaBLWaA7T
        aROOjGklueACv/0Fvf0Gvf0Evf0Ivf0Fvf0Hvf0Gvf0Bwf1ArsK4bijDVwa8XAyFcE/S4+Q1x/Q2xeg5
        vts4uNIxtMwxtMwxtcxCsb2XiVrXZw3SaBLSaBLVaA/VaRCbhlc1ss4Dv/sFvf0Jvf0Jvf0Ivf0Gvf0J
        vf0Fvf0Fvf0Ev/0Ov/N0k4O4XhW5VQeDbk/X4+JkuM6OoIypjV+xgku0eTq2eDi5djS9dDDOaxrZZwvW
        Zw7SaBLYZgzRahWCkncnuuEDv/wFvf0Jvf0Fvf0Gvf0Dvf0Jvf0Dvf0Hvf0Cvv0Gwvk1r82Rcka2VguD
        bk/Z5OF5sLWxkV3Hgj6zfD22eDXAcijNbBnTaRPRahXUaRLXZw3WaA7ZZgvQaxWof0lymo41tNUHwPoB
        v/0Fvf0Ivf0Ivf0Ivf0Cvf0FvfwWvfA3s9BbkZGebTa7XA2FcE/R6O04x/k8wewwwOQnvegkueMmt95F
        rsJbpKZmn6Fxm4+bhFXAcijdYgjLbR11m5BooJyAlIRDq70OwPEEwP0CvP0GvP0Cv/0HwPk2scxvm5R3
        mJBsmo6qZyK5VQeDbk/R6e4vx/0fw/0UxPwLv/0Cv/0Dv/0Iv/kLvvcPvfUPv/Qjt99ZoqOzdzzVaBKd
        iFxwnY9noJx9loFjn54luuACwfwAwf0Tvu1NqruDlHtym49bo6duloqtZSO5VQd9dFjR6vAvx/0qw/0i
        vv0Puv0Dt/0GuP0Ouv0Juf0Juf0AuP0Buv0Lv/RBrL66dTLiXwbEcSlMrbwxvNGCknyAlX8+scgyutpf
        o6mFkoNJrrsvu9aKimjOZhq/Xw+sXRF8c1bU6/JOyP150f2J1f2D1P140P130P12z/12z/150P160P15
        0P140P1s0vxtr7OydTTLbBt3mok7vMtCtMZxnJCGknd1moxjop88r8oqv9xRrrOteDvXYAe9Xg20WA2B
        cFLS7fZPyv2C1v2M2f2Y3P3I6v2q4f2B1f2C1f2Y2/3D6P2p4P2N2v2J2P08yPhUo6mzdzbAcii1dzpg
        oZ8hwedIqbhKqb0VwOwvtdemgVOyez/GcCHIYg69Xg21WAx4eGHQ7fU0x/01xv0qw/1Fxv2i3v140f0e
        vP0bvv1GxP2o3/1xz/0lvv0gwvwav/VXpayzeTvbZQnaZA2Gj3IjvuMKwfgJvfoVwO5Wp6/PaxbbZQnS
        Zw7JZRG9Xg21WAx4eGHR7vgvx/0cw/0Vwf0tvv2X2v130P0Et/0Buv0+wv2e3P1Wx/0Huf0Bw/08r8iq
        fEbXZw7VaA/WZw66djCahVdbo6dTprCTimGrfkPSaRLUaBDTaBDKZBC9XQ21WAx4eGHR8Pkvx/0kxf0X
        wf0qwv2X2f140P0LuP0AuP1Cw/2k3v1Rxv0Fuf0Aw/0/tcu1eDrdYwjUaA/UaBDcZAjeYgaOjnCEknjY
        ZRLdZAnUaRHWaBDVZxHTZA2/WguyWQ13eWHR8Pkvx/0kxf0Xwf0owf2U2f190f0PuP0Atv1Ixf2i3f1F
        xf0Duf0AvP0SwPBum5DJbyDXaA3SaBLYZgzZZguLkHZ2mojKbR/cZQnMbBufhFR7lYGJiWitZSOyWQx2
        emLR8Psvx/0kxf0Xwf0nvv2R2P2F1f0OuP0At/1Ixv2l3/04w/0Fuf0FvP0Cv/0kt96PimbKZRLXZw3W
        Zw3YZgyViGJ7loLEcSXdZAe8dC9PqLUUwe8tsdGRcUe5VQd4eGHR8Psvw/0iw/0WwP0ovv2M1v2G1f0N
        uP0Dtv1QyP2m4P00wv0Fuf0Fu/0At/0Lvfg8tdWtiFPeZQnYZwzJbx6DkniCkXvHcCHcYwiJiWUauecA
        wPwKuOluiXuvWhN7eWHc8/xcy/06wv0dv/0kvf2D1P2N1v0Ruf0Ctv1Wyf2m4P0ov/0Etv0Uu/00wf1l
        zf2V2v25yMXNeDHaYgfSaRO1eTewfD/UaBLOaxhYpqsIwfkCuvoGue5HoLGEb0OBe2Pv+P2y4v2V2f1e
        y/04w/170v2L1f0Ruf0Ft/1Yyf2h3f0wv/0/w/1z0f2h3f2m3v2N2P1KzvpxmpLGax/ZZQvUaBDXZg3a
        ZQrFcSRvnpUxttcXuu4itNxTm6aFc1FyfGfg8/2C0/2i3P214/2X2v2l3v2q4P1Xx/1Ux/2O1/285v2L
        1/2j3v2j3f110P00wf0Yu/0Mu/0ju+CTilzVZgzVaA/VZw/UaBDQaxWlgk5unptOq7tYpa1zfWmdaC93
        fWbj9P2F1f2A0v2V2f2/5/3r9/33+/3q9v3p9f3z+v3w+f3L6/2a2v11z/1kz/1wz/1wz/1vz/1o0/eR
        trXNejPZZwzUaBDSaBLXZw3KbR2Pi2lgo6dhlpScaTazWQ1tf27n9v2Y2/2Z2v2X2v214/3n9f35/P3x
        +f3x+P35/P3q9v2v4v2T1/2L1f2L1/2N2P2U2f2X2f2Y2v2d0uyznoPSaBPYZwzUaBDTaBHXZw3AdCqP
        jGqlfUbHWQWtXQ9pgnDk9f2K1v2Y2f2q4P2q3/3I6v3k9P2g3f2k3/3d8f3H6v2h3f2b2v2A0v1Uxv0w
        v/0kvP0pvf0rv/0nxP1LvN+lglDZahPYaxPQbBjXbRfPaxbJcybLahfEXAmxYRdsgnLv+P225P2q4f2L
        1/1Yyf1cy/2o4P2A1P2M1/2k3v1Yy/1iy/2S2f2p4P2o3/2G1f1mzP1Bw/0evP0Zvv0bwvxVtci8g0TY
        ch7adibadyfZdifadifQbhvUZw+/ZxhvhHTg9P1tz/1Lyv08xv0yxP0xw/1pz/3F6f3D6f1rzv0xwv0q
        xP0uwv1Rx/2I1v2r4P214/2n4P1/1P1fzf05xv0syvh0rqnOhEDkfzPbfjLbfjLeey3bdybbbBXKZxV7
        k4DT8f0/yv1Ayv1Hz/1Czf08yf08yP2E2v161f1EyP0/zP06yf08yv03x/08xv1Yyv110f2Y2/224/23
        5P2Q2v1t1P1Wxuenoo7OkVnKk17Kk17Kk17KjE+/gki2gEZon5vZ9P1V0P1X0P1d0f1b0f1V0P1U0P1c
        0f1a0f1V0P1X0f1U0P1X0P1V0P1U0P1Xz/1Zz/1i0f2F1P2t4f3R7f3O7P2S2vt5yO2LwMqNwcaNwcaN
        wcaOwMOKvcN3usVJvd4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>